---
AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a Multi-AZ, multi-subnet VPC infrastructure
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Availability Zone Configuration"
        Parameters:
          - AvailabilityZones
          - NumberOfAZs
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PublicSubnet4CIDR
          - CreatePrivateSubnets
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR
    ParameterLabels:
      AvailabilityZones:
        default: "Availability Zones"
      CreatePrivateSubnets:
        default: "Create private subnets"
      NumberOfAZs:
        default: "Number of Availability Zones"
      PrivateSubnet1CIDR:
        default: "Private subnet 1 CIDR"
      PrivateSubnet2CIDR:
        default: "Private subnet 2 CIDR"
      PrivateSubnet3CIDR:
        default: "Private subnet 3 CIDR"
      PrivateSubnet4CIDR:
        default: "Private subnet 4 CIDR"
      PrivateSubnetTag1:
        default: "Tag for Private Subnets"
      PrivateSubnetTag2:
        default: "Tag for Private Subnets"
      PrivateSubnetTag3:
        default: "Tag for Private Subnets"
      PublicSubnet1CIDR:
        default: "Public subnet 1 CIDR"
      PublicSubnet2CIDR:
        default: "Public subnet 2 CIDR"
      PublicSubnet3CIDR:
        default: "Public subnet 3 CIDR"
      PublicSubnet4CIDR:
        default: "Public subnet 4 CIDR"
      PublicSubnetTag1:
        default: "Tag for Public Subnets"
      PublicSubnetTag2:
        default: "Tag for Public Subnets"
      PublicSubnetTag3:
        default: "Tag for Public Subnets"
      VPCCIDR:
        default: "VPC CIDR"
      VPCTenancy:
        default: "VPC Tenancy"
Parameters:
  AvailabilityZones:
    Description: "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved."
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreatePrivateSubnets:
    Description: "Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored."
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  NumberOfAZs:
    Description: "Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter."
    Type: String
    AllowedValues:
      - "2"
      - "3"
      - "4"
    Default: "2"
  PrivateSubnet1CIDR:
    Description: "CIDR block for private subnet 1 located in Availability Zone 1"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.0.0/19"
  PrivateSubnet2CIDR:
    Description: "CIDR block for private subnet 2 located in Availability Zone 2"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.32.0/19"
  PrivateSubnet3CIDR:
    Description: "CIDR block for private subnet 3 located in Availability Zone 3"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.64.0/19"
  PrivateSubnet4CIDR:
    Description: "CIDR block for private subnet 4 located in Availability Zone 4"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.96.0/19"
  PublicSubnet1CIDR:
    Description: "CIDR block for the public DMZ subnet 1 located in Availability Zone 1"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.128.0/20"
  PublicSubnet2CIDR:
    Description: "CIDR block for the public DMZ subnet 2 located in Availability Zone 2"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.144.0/20"
  PublicSubnet3CIDR:
    Description: "CIDR block for the public DMZ subnet 3 located in Availability Zone 3"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.160.0/20"
  PublicSubnet4CIDR:
    Description: "CIDR block for the public DMZ subnet 4 located in Availability Zone 4"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.176.0/20"
  VPCCIDR:
    Description: "CIDR block for the VPC"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.0.0/16"
  ManagementVPCCIDR:
    Description: "CIDR block for the Management VPC"
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.10.0.0/16"
Conditions:
  3AZCondition: !Or
    - !Equals [!Ref NumberOfAZs, "3"]
    - !Condition 4AZCondition
  4AZCondition: !Equals [!Ref NumberOfAZs, "4"]
  PrivateSubnetsCondition: !Equals [!Ref CreatePrivateSubnets, "true"]
  PrivateSubnets&3AZCondition: !And
    - !Condition PrivateSubnetsCondition
    - !Condition 3AZCondition
  PrivateSubnets&4AZCondition: !And
    - !Condition PrivateSubnetsCondition
    - !Condition 4AZCondition
  NVirginiaRegionCondition: !Equals [!Ref "AWS::Region", "us-east-1"]
Resources:
  DHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName:
        !If [
          NVirginiaRegionCondition,
          "ec2.internal",
          !Sub "${AWS::Region}.compute.internal",
        ]
      DomainNameServers:
        - AmazonProvidedDNS

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Ref AWS::StackName

  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Ref "AWS::StackName"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet1:
    Condition: PrivateSubnetsCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select ["0", !Ref AvailabilityZones]
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Condition: PrivateSubnetsCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select ["1", !Ref AvailabilityZones]
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
  PrivateSubnet3:
    Condition: PrivateSubnets&3AZCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select ["2", !Ref AvailabilityZones]
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet3
  PrivateSubnet4:
    Condition: PrivateSubnets&4AZCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet4CIDR
      AvailabilityZone: !Select ["3", !Ref AvailabilityZones]
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet4

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select ["0", !Ref AvailabilityZones]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select ["1", !Ref AvailabilityZones]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PublicSubnet2
  PublicSubnet3:
    Condition: 3AZCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select ["2", !Ref AvailabilityZones]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PublicSubnet3
  PublicSubnet4:
    Condition: 4AZCondition
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet4CIDR
      AvailabilityZone: !Select ["3", !Ref AvailabilityZones]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PublicSubnet4

  PrivateSubnet1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet1RouteTable
        - Key: "Network"
          Value: "Private"
  PrivateSubnet1Route:
    Condition: PrivateSubnetsCondition
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable

  PrivateSubnet2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet2RouteTable
        - Key: "Network"
          Value: "Private"
  PrivateSubnet2Route:
    Condition: PrivateSubnetsCondition
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1 # 1 NAT Gateway only - no HA
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable

  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet3RouteTable
        - Key: "Network"
          Value: "Private"
  PrivateSubnet3Route:
    Condition: PrivateSubnets&3AZCondition
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1 # 1 NAT Gateway only - no HA
  PrivateSubnet3RouteTableAssociation:
    Condition: PrivateSubnets&3AZCondition
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateSubnet3RouteTable

  PrivateSubnet4RouteTable:
    Condition: PrivateSubnets&4AZCondition
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PrivateSubnet4RouteTable
        - Key: "Network"
          Value: "Private"
  PrivateSubnet4Route:
    Condition: PrivateSubnets&4AZCondition
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateSubnet4RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1 # 1 NAT Gateway only - no HA
  PrivateSubnet4RouteTableAssociation:
    Condition: PrivateSubnets&4AZCondition
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateSubnet4RouteTable

  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackName}-PublicSubnetRouteTable
        - Key: "Network"
          Value: "Public"
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet4RouteTableAssociation:
    Condition: 4AZCondition
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicSubnetRouteTable

  NAT1EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway1:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NAT1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "*"
            Effect: "Allow"
            Resource: "*"
            Principal: "*"
      RouteTableIds:
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !If [
            PrivateSubnets&3AZCondition,
            !Ref PrivateSubnet3RouteTable,
            !Ref "AWS::NoValue",
          ]
        - !If [
            PrivateSubnets&4AZCondition,
            !Ref PrivateSubnet4RouteTable,
            !Ref "AWS::NoValue",
          ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  SSMSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSM Security Group allows SSM manage private instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: Allow SSM manage instances
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          Description: Allow SSH from VPN
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ManagementVPCCIDR
        # Allow Access
        - IpProtocol: tcp
          Description: Allow Access PostgreSQL from VPN
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref ManagementVPCCIDR
        - IpProtocol: tcp
          Description: Allow Access Prometheus Metrics
          FromPort: 9100
          ToPort: 9110
          CidrIp: !Ref ManagementVPCCIDR
  # SSM Manages Private Instance Endpoint
  SSMVPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !If [
            PrivateSubnets&3AZCondition,
            !Ref PrivateSubnet3,
            !Ref "AWS::NoValue",
          ]
        - !If [
            PrivateSubnets&4AZCondition,
            !Ref PrivateSubnet4,
            !Ref "AWS::NoValue",
          ]
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  SSMMessagesVPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !If [
            PrivateSubnets&3AZCondition,
            !Ref PrivateSubnet3,
            !Ref "AWS::NoValue",
          ]
        - !If [
            PrivateSubnets&4AZCondition,
            !Ref PrivateSubnet4,
            !Ref "AWS::NoValue",
          ]
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  EC2MessagesVPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !If [
            PrivateSubnets&3AZCondition,
            !Ref PrivateSubnet3,
            !Ref "AWS::NoValue",
          ]
        - !If [
            PrivateSubnets&4AZCondition,
            !Ref PrivateSubnet4,
            !Ref "AWS::NoValue",
          ]
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  MavenRepoSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Maven Repo Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCIDR

Outputs:
  PrivateSubnet1CIDR:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 1 CIDR in Availability Zone 1"
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1CIDR
  PrivateSubnet1ID:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 1 ID in Availability Zone 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1ID
  PrivateSubnet1AZ:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 1 Availability Zone"
    Value: !GetAtt PrivateSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1AZ

  PrivateSubnet2CIDR:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 2 CIDR in Availability Zone 2"
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2CIDR
  PrivateSubnet2ID:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 2 ID in Availability Zone 2"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2ID
  PrivateSubnet2AZ:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 2 Availability Zone"
    Value: !GetAtt PrivateSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2AZ

  PrivateSubnet3CIDR:
    Condition: PrivateSubnets&3AZCondition
    Description: "Private subnet 3 CIDR in Availability Zone 3"
    Value: !Ref PrivateSubnet3CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3CIDR
  PrivateSubnet3ID:
    Condition: PrivateSubnets&3AZCondition
    Description: "Private subnet 3 ID in Availability Zone 3"
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3ID
  PrivateSubnet3AZ:
    Condition: PrivateSubnets&3AZCondition
    Description: "Private subnet 3 Availability Zone"
    Value: !GetAtt PrivateSubnet3.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3AZ

  PrivateSubnet4CIDR:
    Condition: PrivateSubnets&4AZCondition
    Description: "Private subnet 4 CIDR in Availability Zone 4"
    Value: !Ref PrivateSubnet4CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4CIDR
  PrivateSubnet4ID:
    Condition: PrivateSubnets&4AZCondition
    Description: "Private subnet 4 ID in Availability Zone 4"
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4ID
  PrivateSubnet4AZ:
    Condition: PrivateSubnets&4AZCondition
    Description: "Private subnet 4 Availability Zone"
    Value: !GetAtt PrivateSubnet4.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4AZ

  PublicSubnet1CIDR:
    Description: "Public subnet 1 CIDR in Availability Zone 1"
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1CIDR
  PublicSubnet1ID:
    Description: "Public subnet 1 ID in Availability Zone 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1ID

  PublicSubnet2CIDR:
    Description: "Public subnet 2 CIDR in Availability Zone 2"
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2CIDR
  PublicSubnet2ID:
    Description: "Public subnet 2 ID in Availability Zone 2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2ID

  PublicSubnet3CIDR:
    Condition: 3AZCondition
    Description: "Public subnet 3 CIDR in Availability Zone 3"
    Value: !Ref PublicSubnet3CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3CIDR
  PublicSubnet3ID:
    Condition: 3AZCondition
    Description: "Public subnet 3 ID in Availability Zone 3"
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3ID

  PublicSubnet4CIDR:
    Condition: 4AZCondition
    Description: "Public subnet 4 CIDR in Availability Zone 4"
    Value: !Ref PublicSubnet4CIDR
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet4CIDR
  PublicSubnet4ID:
    Condition: 4AZCondition
    Description: "Public subnet 4 ID in Availability Zone 4"
    Value: !Ref PublicSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet4ID

  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Description: "S3 VPC Endpoint"
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-S3VPCEndpoint

  PrivateSubnet1RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref PrivateSubnet1RouteTable
    Description: "Private subnet 1 route table"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1RouteTable

  PrivateSubnet2RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref PrivateSubnet2RouteTable
    Description: "Private subnet 2 route table"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2RouteTable

  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Value: !Ref PrivateSubnet3RouteTable
    Description: "Private subnet 3 route table"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3RouteTable

  PrivateSubnet4RouteTable:
    Condition: PrivateSubnets&4AZCondition
    Value: !Ref PrivateSubnet4RouteTable
    Description: "Private subnet 4 route table"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4RouteTable

  PublicSubnetRouteTable:
    Value: !Ref PublicSubnetRouteTable
    Description: "Public subnet route table"
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetRouteTable

  VPCCIDR:
    Value: !Ref VPCCIDR
    Description: "VPC CIDR"
    Export:
      Name: !Sub ${AWS::StackName}-VPCCIDR

  VPCID:
    Value: !Ref VPC
    Description: "VPC ID"
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  SSMSG:
    Value: !Ref SSMSG
    Description: "SSM Security Groups"
    Export:
      Name: !Sub ${AWS::StackName}-SSMSG

  MavenRepoSG:
    Value: !Ref MavenRepoSG
    Description: "Private Maven Repo Security Groups"
    Export:
      Name: !Sub ${AWS::StackName}-MavenRepoSG
