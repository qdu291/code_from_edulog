// Notify to channel
def notifyGChat(branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  hangoutsNotify message: "BUILD & PACKAGE: ${currentBuild.result}\nService: Athena\nBranch: ${branch}\n*BuildVersion*: ${version}\nCommit: ${commit}\nDuration: ${DURATION}",
    token: "${channel}", threadByJob: true
}

def notifySlack(branch, version, commit, channel) {
  def DURATION = currentBuild.durationString.split(' and ')[0]
  def blocks = [
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": ":rocket: *AthenaUI - #${branch}*"
      ]
    ],
      [
      "type": "divider"
    ],
    [
      "type": "section",
      "text": [
        "type": "mrkdwn",
        "text": "BUILD & PACKAGE: *${currentBuild.result}*\nService: Athena\nBranch: ${branch}\n*BuildVersion*: ${version}\nCommit: ${commit}\nDuration: ${DURATION}"
      ]
    ]
  ]
  slackSend(channel: "#${channel}", blocks: blocks)
}

pipeline{
  agent any

  environment {
    BRANCH_NAME = GIT_BRANCH.substring(GIT_BRANCH.lastIndexOf('/') + 1, GIT_BRANCH.length()).trim()
    SHORT_COMMIT = GIT_COMMIT.substring(0,7)
    BUILD_VERSION = "${GIT_COMMIT}"
    
    SERVICE_NAME = 'gateway'
    ARTIFACT_PATH = "s3://${ATH_S3_ARTIFACTS_BUCKET}/backend/build/gateway"
    JOB_DEPLOY = 'athena/backend/deployment/be-cd'

    GCHAT_TOKEN = "${GCHAT_TOKEN_ATH_BE_CICD}"
  }

  stages {
    stage('Sonar Quality Gate') {
      when { branch 'dev' }
      steps {
        echo "=> Build Version: $BUILD_VERSION"
        echo "==> Build Service for branch: ${env.BRANCH_NAME}"
        echo "==> Analyze Code with SonarQube"
        withSonarQubeEnv('ATH_SONARQUBE') {
          sh 'mvn clean package sonar:sonar -Dsonar.projectKey=athena-gateway'
        }
        echo "==> Quality Gate with SonarQube"
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    stage('Build') {
      when { not { branch 'dev' } }
      steps {
        echo "=> Build Version: $BUILD_VERSION"
        echo "==> Build Service for branch: ${env.BRANCH_NAME}"
        sh 'mvn clean install'
      }
    }
    stage('Package') {
      steps {
        echo "==> Upload Artifact to S3"
        dir('target') {
          sh "aws s3 cp *.jar ${ARTIFACT_PATH}/${BUILD_VERSION}.jar"
        }
      }
      post {
        failure {
          echo "=> Build failure"
          notifyGChat("${BRANCH_NAME}", "${BUILD_VERSION}", "${SHORT_COMMIT}", "${GCHAT_TOKEN}")
        }
        success {
          echo "=> Build success"
          notifyGChat("${BRANCH_NAME}", "${BUILD_VERSION}", "${SHORT_COMMIT}", "${GCHAT_TOKEN}")
        }
      }
    }
    stage('Deploy') {
      when { anyOf { 
        branch 'development-ktvn'; 
        branch 'ktvn'; 
        branch 'fr'; 
        branch 'develop';
        branch 'master';
        branch pattern: "release/.+", comparator: "REGEXP" 
      } }
      steps {
        build job: "${JOB_DEPLOY}", parameters: [
          string(name: 'branch_name', value: "${BRANCH_NAME}"),
          string(name: 'service', value: "${SERVICE_NAME}"),
          string(name: 'binary_path', value: "${ARTIFACT_PATH}/${BUILD_VERSION}.jar"),
          string(name: 'version', value: "${BUILD_VERSION}")]
      }
    }
  }
  post {
    always {
      echo "=> Clean Workspace after run"
      cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}