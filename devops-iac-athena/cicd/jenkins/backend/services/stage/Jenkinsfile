pipeline{
  agent any

  triggers {
    pollSCM('H/5 * * * *') // poll SCM every 5 minutes
  }

  environment {
    ENV = 'stage'
    SERVICE_NAME = 'services'
    JOB_IMAGE_BUILD = 'ath-be-image-build'
  }

  stages{
    stage('Checkout') {
      steps {
        script {
          def scmVars = checkout([
            $class: 'GitSCM', 
            branches: [[name: '*/master']],
            userRemoteConfigs: [[url: 'git@github.com:eduloginc/Athena.git',credentialsId: 'eduloginc-git-tankhuu']]
          ])
          // Set env GIT_COMMIT & SHORT_COMMIT & BUILD_VERSION
          env.GIT_COMMIT = scmVars.GIT_COMMIT
          env.SHORT_COMMIT = scmVars.GIT_COMMIT.substring(0,7)
        }
      }
    }
    stage('Build') {
      steps {
        echo "==> Build jar files"
        dir('Source/BuildAggregator') {
          //sh 'cp -p ${JENKINS_HOME}/athena/config/BuildAggregator/pom.xml .'
          echo "==> Get build_version"
          script {
            def pomVersion = sh(script: 'mvn -q -Dexec.executable=\'echo\' -Dexec.args=\'${project.version}\' --non-recursive exec:exec', returnStdout: true).trim()
            env.BUILD_VERSION = "${pomVersion}.${BUILD_NUMBER}.${GIT_COMMIT}"
          }
          echo "==> Build Services with build_version: ${env.BUILD_VERSION}"
          sh 'mvn clean install -DskipTests -e -U'
        }
        echo "==> Prepare for package jar files"
        dir("${JENKINS_HOME}/.m2/repository/com/edulog") {
          sh '''#!/bin/bash -xe
              BUILD_DIR=/tmp/${BUILD_VERSION}
              mkdir -p /tmp/${BUILD_VERSION}
              cp -p RoutingServer/0.1.0/RoutingServer-0.1.0.jar $BUILD_DIR/RoutingServer.jar
              cp -p ReportsServer/0.1.0/ReportsServer-0.1.0.jar $BUILD_DIR/ReportsServer.jar
              cp -p TransactionHUBV2/2.1.0/TransactionHUBV2-2.1.0.jar $BUILD_DIR/TransactionHUBV2.jar
              cp -p RoutingMigration/1.0/RoutingMigration-1.0.jar $BUILD_DIR/RoutingMigration.jar
              cp -p PlannedRollover/2.1.0/PlannedRollover-2.1.0.jar $BUILD_DIR/PlannedRollover.jar
              ls -l $BUILD_DIR
            '''
        }
        echo "==> Package jar files"
        sh """#!/bin/bash
          cd /tmp
          tar zcvf ${BUILD_VERSION}.tar.gz ${BUILD_VERSION}
        """
      }
    }
    stage('Upload Artifacts') {
      steps {
        echo "==> Upload Package jar files to S3"
        sh '''#!/bin/bash -xe
          aws s3 cp /tmp/${BUILD_VERSION}.tar.gz s3://${ATH_S3_ARTIFACTS_BUCKET}/athena/backend/${SERVICE_NAME}/${ENV}/
        '''
      }
    }
    stage('Deploy') {
      steps {
        echo "==> Deploy ${env.SERVICE_NAME} to Stage Environment."
        build job: "${JOB_IMAGE_BUILD}", parameters: [
          string(name: 'SERVICE_NAME', value: "${SERVICE_NAME}"),
          string(name:'BUILD_VERSION', value: "${BUILD_VERSION}"),
          string(name:'SHORT_COMMIT', value: "${SHORT_COMMIT}")]
      }
    }
  }
  post {
    always {
      echo "==> Clean up Package jar files"
      sh 'rm /tmp/${BUILD_VERSION}.tar.gz'
    }
    success {
      echo "==> Send Git Status Check Success"
    //   sh "send-git-status ${GIT_USERNAME} ${ATH_GEOCODE_REPO_NAME} ${GIT_COMMIT} ${GIT_STATUS_ACCESS_TOKEN} success ${JOB_BASE_NAME} ${BUILD_NUMBER}"
    }
    failure {
      echo "==> Send Git Status Check Failure"
    //   sh "send-git-status ${GIT_USERNAME} ${ATH_GEOCODE_REPO_NAME} ${GIT_COMMIT} ${GIT_STATUS_ACCESS_TOKEN} failure ${JOB_BASE_NAME} ${BUILD_NUMBER}"
    }
  }
}
