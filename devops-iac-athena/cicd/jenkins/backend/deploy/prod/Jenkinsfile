// Job Name: ath-be-deploy-prod
pipeline {
  agent any

  parameters {
    choice(name: 'TENANT', choices: ['edulog', 'oracle'], description: 'Tenant to deploy')
    string(name: 'RELEASE_VERSION', description: 'QA/QC Image Tag for the Release Version of Backend. Ex: BE-1.0.0')
  }

  environment {
    ENV = 'prod'
  }

  stages {
    stage('Deploy Edulog') {
      when { equals expected: 'edulog', actual: params.TENANT }
      steps {
        echo "==> Update new AMI into ${env.ENV} CFN Stack of Edulog: ${params.TENANT}"
        sh '''#!/bin/bash
          /usr/local/bin/deploy-prod-edulog ${TENANT} ${RELEASE_VERSION}
        '''
      }
    }
    stage('Deploy Tenant') {
      when { not { equals expected: 'edulog', actual: params.TENANT } }
      steps {
        echo "==> Update new AMI into ${env.ENV} CFN Stack of Tenant: ${params.TENANT}"
        sh '''#!/bin/bash
          /usr/local/bin/deploy-prod ${TENANT} ${RELEASE_VERSION}
        '''
      }
    }
  }

  post {
    success {
      echo "Deploy success for Environment: ${ENV} on Tenant: ${params.TENANT}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nTenant: ${TENANT}\nRelease-Version: ${RELEASE_VERSION}\nDuration: ${currentBuild.durationString}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
    }
    failure {
      echo "Deploy failure for Environment: ${ENV} on Tenant: ${params.TENANT}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nTenant: ${TENANT}\nRelease-Version: ${RELEASE_VERSION}\nDuration: ${currentBuild.durationString}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
    }
  }
}