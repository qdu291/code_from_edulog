// Job Name: ath-fe-cicd-stage
pipeline {
  agent any

  triggers {
    pollSCM('H/7 * * * *') // poll SCM every 7 minutes
  }

  environment {
    ENV = 'stage'
    CONFIG_FILE = 'systemconfig'
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          def scmVars = checkout([
            $class: 'GitSCM', 
            branches: [[name: '*/dev']],
            userRemoteConfigs: [[
              url: 'git@github.com:eduloginc/EduLog-AthenaUI-v1_2.git', 
              credentialsId: 'eduloginc-git-tankhuu'
              ]]
          ])
          // Set env GIT_COMMIT & SHORT_COMMIT & BUILD_VERSION
          env.GIT_COMMIT = scmVars.GIT_COMMIT
          env.SHORT_COMMIT = scmVars.GIT_COMMIT.substring(0,7)
          env.BUILD_VERSION = "${SHORT_COMMIT}.${BUILD_NUMBER}"
        }
      }
    }
    stage('Build') {
      steps {
        echo "==> Build Athena Frontend for ${env.ENV}"
        // sh '''#!/bin/bash -xe
        //   cp -p /opt/athena/config/${ENV}/app.stompconfig.ts src/app/app.stompconfig.ts
        // '''
        sh 'npm install > /dev/null'
        sh 'npm run postinstall'
        // Make sure building angularjs jobs not run at the same time
        lock('ATH_FE_BUILDER') {
          echo "==> Building..."
          sh 'npm run build:prod'
        }
      }
    }
    stage('Configure') {
      steps {
        echo "==> Update config in assets/${env.CONFIG_FILE}.json"
        dir('dist/assets') {
          sh 'cp ${CONFIG_FILE}.json /tmp/${CONFIG_FILE}.${ENV}.json'
          sh "update-fe-config ${CONFIG_FILE} ${BUILD_VERSION} ${ENV}"
          sh 'cp /tmp/${CONFIG_FILE}.${ENV}.json ${CONFIG_FILE}.json'
        }
      }
    }
    stage('Package') {
      steps {
        echo "==> Package Angular"
        sh 'tar zcvf ${BUILD_VERSION}.tar.gz dist/'
        echo "==> Upload to S3 Artifact"
        sh 'aws s3 cp ${BUILD_VERSION}.tar.gz s3://${ATH_S3_ARTIFACTS_BUCKET}/athena/frontend/build/'
        echo "==> Versioning Package"
        sh '/usr/local/bin/versioning-fe-package ${BUILD_VERSION} ${GIT_COMMIT}'
      }
    }
    stage('Deploy') {
      steps {
        dir('dist') {
          echo "==> Deploy Athena Frontend for ${env.ENV}"
          echo "==> Remove files on s3://athena-${env.ENV}.${env.ATH_FE_DOMAIN}"
          sh '''#!/bin/bash -xe
            aws s3 rm s3://athena-${ENV}.${ATH_FE_DOMAIN} --recursive
          '''
          echo "==> Upload files to s3://athena-${env.ENV}.${env.ATH_FE_DOMAIN}"
          sh '''#!/bin/bash -xe
            aws s3 cp --acl public-read --recursive . s3://athena-${ENV}.${ATH_FE_DOMAIN}/
          '''
          echo "==> Set Cache-Control for Service Worker"
          sh '''#!/bin/bash -xe
            aws s3 cp --acl public-read --cache-control max-age=0 ./index.html s3://athena-${ENV}.${ATH_FE_DOMAIN}/
            aws s3 cp --acl public-read --cache-control max-age=0 ./ngsw-worker.js s3://athena-${ENV}.${ATH_FE_DOMAIN}/
          '''
          echo "==> Invalidate Cloudfront ${env.ATH_STAGE_CF_ID}"
          sh '''#!/bin/bash -xe
            aws cloudfront create-invalidation --distribution-id ${ATH_STAGE_CF_ID} --paths \"/*\"
          '''
        }
      }
    }
  }

  post {
    always {
      echo '==> Clean up built after run'
      sh 'rm ${BUILD_VERSION}.tar.gz'
      cleanWs()
    }
    success {
      script {
        env.DURATION = currentBuild.durationString.split(' and ')[0]
      }
      echo "Deploy success for ${ENV}"
      echo "==> Send Git Status Check Success"
      sh "send-git-status ${GIT_USERNAME} ${ATH_FRONTEND_REPO_NAME} ${GIT_COMMIT} ${GIT_STATUS_ACCESS_TOKEN} success ${JOB_BASE_NAME} ${BUILD_NUMBER}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nCommit: ${SHORT_COMMIT}\nBuild-Version: ${BUILD_VERSION}\nDuration: ${DURATION}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
      echo "==> Send Success Message to Slack"
      script {
        def blocks = [
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": ":rocket: *${JOB_NAME} #${BUILD_NUMBER}*"
            ]
          ],
            [
            "type": "divider"
          ],
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": "Status: *${currentBuild.result}*\nEnvironment: `${ENV}`\nCommit: `${SHORT_COMMIT}`\nBuild-Version: `${BUILD_VERSION}`\nDuration: `${DURATION}`"
            ]
          ]
        ]
        slackSend(channel: "#${ATH_SLACK_NOTIFICATION_CHANNEL}", blocks: blocks)
        // slackSend(channel: "#check-tool", blocks: blocks)
      }
    }
    failure {
      script {
        env.DURATION = currentBuild.durationString.split(' and ')[0]
      }
      echo "Deploy failed for ${ENV}"
      echo "==> Send Git Status Check Failure"
      sh "send-git-status ${GIT_USERNAME} ${ATH_FRONTEND_REPO_NAME} ${GIT_COMMIT} ${GIT_STATUS_ACCESS_TOKEN} failure ${JOB_BASE_NAME} ${BUILD_NUMBER}"
      hangoutsNotify message: "*${currentBuild.result}*\nEnvironment: ${ENV}\nCommit: ${SHORT_COMMIT}\nBuild-Version: ${BUILD_VERSION}\nDuration: ${DURATION}",
        token: "${ATH_GOOGLE_CHAT_TOKEN}", threadByJob: true
      echo "==> Send Failure Message to Slack"
      script {
        def blocks = [
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": ":rocket: *${JOB_NAME} #${BUILD_NUMBER}*"
            ]
          ],
            [
            "type": "divider"
          ],
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": "Status: *${currentBuild.result}*\nEnvironment: `${ENV}`\nCommit: `${SHORT_COMMIT}`\nBuild-Version: `${BUILD_VERSION}`\nDuration: `${DURATION}`"
            ]
          ]
        ]
        slackSend(channel: "#${ATH_SLACK_NOTIFICATION_CHANNEL}", blocks: blocks)
        // slackSend(channel: "#check-tool", blocks: blocks)
      }
    }
  }
}