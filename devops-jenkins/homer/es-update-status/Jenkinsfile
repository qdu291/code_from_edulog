// Homer Elasticsearch Shipper Job

node {
    feReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_frontend.txt', returnStdout: true).trim()
    wqReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_webquery.txt', returnStdout: true).trim()
    beReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_backend.txt', returnStdout: true).trim()
    infrasReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_infras.txt', returnStdout: true).trim()
}
pipeline {
  agent any
  
  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'ENV', choices: ['nonprod', 'prod'], description: 'Environment of site')
    string(name: 'TENANT', description: 'Tenant should not be duplicated with the existing tenants!!! Tenant must contain only [a-z] and hyphen! No uppercase!!')
    choice(name: 'SITE_STATUS', choices: ['active', 'de-active'], description: 'Environment of site')
    //choice(name: 'FE_RELEASE_VERSION', choices: "${feReleasesList}", description: 'Release Version of Frontend. Eg. 1.29.0')
    //choice(name: 'BE_RELEASE_VERSION', choices: "${beReleasesList}", description: 'Release Version of Backend to get AMI for Deployment Backend Servicess. Eg. 1.29.15')
  }
  environment {
    currentDate = sh(returnStdout: true, script: 'date +%Y-%m-%d').trim()
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages{
        stage('Verify Authorization') {
          steps {
            script {
              // Get Build User
              wrap([$class: 'BuildUser']) {
                env.CREATOR = "${BUILD_USER_ID}"
              }
              if(CREATOR == 'anonymous') {
                error('You have to login to run this job!!!')
              }
            }
          }
        }
        stage('Checkout') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              echo "Homer is updating Site information"
              sh '''
                #!/bin/bash -xe
                cd ~/athena/devops-automation-helper/friday/esShipper/
                /usr/bin/python3 -m es_update_site_status --site_name=${TENANT} --site_status=${SITE_STATUS} --envType=${ENV}
              '''
            }
          }
        }
      }
    }
  }
  post {
    always {
      echo '==> Clean up built after run'
      cleanWs()
    }
    success {
      echo "Job run success"
    }
    failure {
      echo "Job run failed"
    }
  }
}