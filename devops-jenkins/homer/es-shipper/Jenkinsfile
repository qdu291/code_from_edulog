// Homer Elasticsearch Shipper Job

node {
    feReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_frontend.txt', returnStdout: true).trim()
    wqReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_webquery.txt', returnStdout: true).trim()
    beReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_backend.txt', returnStdout: true).trim()
    infrasReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_infras.txt', returnStdout: true).trim()
}
pipeline {
  agent any
  
  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'INFRAS_VERSION', choices: "${infrasReleasesList}", description: 'Release Version of Infrastructure. Default is latest Version, Eg. v1.1.0')
    choice(name: 'REGION', choices: ['us-east-2'])
    string(name: 'ENV', description: 'Environment of site')
    string(name: 'TENANT', description: 'Tenant should not be duplicated with the existing tenants!!! Tenant must contain only [a-z] and hyphen! No uppercase!!')
    string(name: 'TENANT_ID', description: 'Tenant ID to create environment. It is required when IS_NEW_TENANT is No!')
    string(name: 'STACK_NAME', description: 'Stack name of which used to created this ATH site before')
    choice(name: 'FE_RELEASE_VERSION', choices: "${feReleasesList}", description: 'Release Version of Frontend. Eg. 1.29.0')
    choice(name: 'WQ_RELEASE_VERSION', choices: "${wqReleasesList}", description: 'Release Version of WebQuery. Eg. 1.0.0')
    choice(name: 'BE_RELEASE_VERSION', choices: "${beReleasesList}", description: 'Release Version of Backend to get AMI for Deployment Backend Servicess. Eg. 1.29.15')
    string(name: 'SITE_CREATOR', description: 'Person who created this site before')
    choice(name: 'ENV_SIZE', choices: ['Small', 'Medium', 'Large'], description: 'Size of the Environment. Default is Small')
    string(name: 'CREATED_DATE', description: 'Creation date of site')
  }
  environment {
    DOMAIN = 'athena-nonprod.com'
    currentDate = sh(returnStdout: true, script: 'date +%Y-%m-%d').trim()
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages{
        stage('Verify Authorization') {
          steps {
            script {
              // Get Build User
              wrap([$class: 'BuildUser']) {
                env.CREATOR = "${BUILD_USER_ID}"
              }
              if(CREATOR == 'anonymous') {
                error('You have to login to run this job!!!')
              }
            }
          }
        }
        stage('Checkout') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              echo "Homer collect information"
              script {
                def createDate = sh(script: "echo `date`", returnStdout: true).trim()
                env.filePath = "/tmp/sites/site-${ENV}-${TENANT}.json"
                def document = [
                  "region": "ohio",
                  "site": "$TENANT",
                  "envType": "$ENV",
                  "cfnStack": "$STACK_NAME",
                  "tenantId": "$TENANT_ID",
                  "size": "$ENV_SIZE",
                  "feVersion": "$FE_RELEASE_VERSION",
                  "wqVersion": "$WQ_RELEASE_VERSION",
                  "beVersion": "$BE_RELEASE_VERSION",
                  "infrasVersion": "$INFRAS_VERSION",
                  "feUrl": "https://${params.TENANT}.${DOMAIN}",
                  "wqUrl": "https://webquery-${params.TENANT}.${DOMAIN}",
                  "beUrl": "https://ath-be-${params.TENANT}.${DOMAIN}",
                  "rdsEndpoint": "athena-${TENANT}-rds.cr5mzwdlkiuv.us-east-2.rds.amazonaws.com",
                  "creator": "$SITE_CREATOR",
                  "createTime": "$CREATED_DATE",
                  "status": "active"
                ]
                writeJSON file: "$filePath", json: document
              }
              sh '''
                #!/bin/bash -xe
                cd ~/athena/devops-automation-helper/friday/esShipper/
                /usr/bin/python3 -m index --filePath=${filePath}
              '''
            }
          }
        }
      }
    }
  }
  post {
    always {
      echo '==> Clean up built after run'
      cleanWs()
    }
    success {
      echo "Job run success"
    }
    failure {
      echo "Job run failed"
    }
  }
}