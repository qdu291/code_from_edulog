
// Notify to channel
// def notifyGChat(siteName, envType, feVersion, beVersion, wqVersion, infrasVersion, room, creator) {
//   def DURATION = currentBuild.durationString.split(' and ')[0]
//   hangoutsNotify message: "Status: ${currentBuild.result}\nAthena New Site Provision\nEnvType: ${envType}\nSiteName: ${siteName}\nFEVersion: ${feVersion}\nBEVersion: ${beVersion}\nWQVersion: ${wqVersion}\nInfrasVersion: ${infrasVersion}\nDuration: ${DURATION}\nCreator: ${creator}",
//     token: "${room}", threadByJob: true
// }

// Function Configure Package for deployment to Tenant
def configurePackage(env, version, env_type) {
  def configFileName = 'systemconfig'
  dir('dist/assets') {
    sh "cp ${configFileName}.json /tmp/${configFileName}.${env}.json"
    sh "update-fe-config ${configFileName} ${version} ${env} ${env_type}"
    sh "cp /tmp/${configFileName}.${env}.json ${configFileName}.json"
    sh "cat ${configFileName}.json"
  }
}
def configureWQPackage(env, version, env_type) {
  def configFileName = 'config'
  dir('dist/web-query/assets') {
    sh "cp ${configFileName}.json /tmp/${configFileName}.${env}.json"
    sh "update-fe-webquery-config ${configFileName} ${version} ${env} ${env_type}"
    sh "cp /tmp/${configFileName}.${env}.json ${configFileName}.json"
    sh "cat ${configFileName}.json"
  }
}

// Function deploy Frontend to Tenant
def deployToTenant(env_type, domain) {
  echo "=> Deploy to ${domain}"
  AWS_CMD = 'aws'
  if(env_type == 'prod') {
    AWS_CMD = 'aws --profile prod'
  }
  dir('dist') {
    echo "=> Remove files on s3://${domain}"
    sh "${AWS_CMD} s3 rm s3://${domain} --recursive"
    echo "=> Upload files to s3://${domain}"
    sh "${AWS_CMD} s3 cp --acl public-read --recursive . s3://${domain}/"
    echo "=> Set Cache-Control for Service Worker"
    sh "${AWS_CMD} s3 cp --acl public-read --cache-control max-age=0 ./index.html s3://${domain}/"
    sh "${AWS_CMD} s3 cp --acl public-read --cache-control max-age=0 ./ngsw-worker.js s3://${domain}/"
  }
}
def deployWQToTenant(env_type, domain) {
  echo "=> Deploy to ${domain}"
  AWS_CMD = 'aws'
  if(env_type == 'prod') {
    AWS_CMD = 'aws --profile prod'
  }
  dir('dist/web-query') {
    echo "=> Remove files on s3://${domain}"
    sh "${AWS_CMD} s3 rm s3://${domain} --recursive"
    echo "=> Upload files to s3://${domain}"
    sh "${AWS_CMD} s3 cp --acl public-read --recursive . s3://${domain}/"
  }
}

node {
    feReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_frontend.txt', returnStdout: true).trim()
    wqReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_webquery.txt', returnStdout: true).trim()
    beReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/services/releaseTags/releases.txt', returnStdout: true).trim()
    infrasReleasesList = sh (script: 'cat ${JENKINS_HOME}/athena/versions/release_infras.txt', returnStdout: true).trim()
}
pipeline {
  agent any

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    choice(name: 'INFRAS_VERSION', choices: "${infrasReleasesList}", description: 'Release Version of Infrastructure. Default is latest Version, Eg. v1.1.0')
    choice(name: 'REGION', choices: ['us-east-2'])
    string(name: 'TENANT', description: 'Tenant should not be duplicated with the existing tenants!!! Tenant must contain suffix "-eks" and only [a-z] and hyphen! No uppercase!! Eg: development-ktvn-eks')
    string(name: 'TENANT_ID', description: 'Tenant ID to create environment. It is required when IS_NEW_TENANT is No!')
    choice(name: 'FE_RELEASE_VERSION', choices: "${feReleasesList}", description: 'Release Version of Frontend. Eg. 1.29.0')
    choice(name: 'WQ_RELEASE_VERSION', choices: "${wqReleasesList}", description: 'Release Version of WebQuery. Eg. 1.0.0')
    choice(name: 'BE_RELEASE_VERSION', choices: "${beReleasesList}", description: 'Release Version of Backend to get Image tag for Deployment Backend Servicess. Eg. 1.29.15')
    string(name: 'DB_SNAPSHOT_ID', defaultValue: 'arn:aws:rds:us-east-2:696952606624:snapshot:athena-base-rds-version-2079', description: 'RDS Snapshot ID to deploy base database into RDS')
    password(name: 'DB_MASTER_PASSWORD', defaultValue: 'rU18iWV4qxKU', description: 'Password for user postgres of RDS')
    choice(name: 'ENV_SIZE', choices: ['Small', 'Medium', 'Large'], description: 'Size of the Environment. Default is Small')
    string(name: 'NOS_HOST', defaultValue: '10.11.5.15', description: 'NOS host address')
  }

  environment {
    PROJECT = 'athena'
    ENV = 'nonprod'
    AUTHOR = 'devops'
    STACK_NAME = "${PROJECT}-${params.TENANT}"
    VPC_STACK_NAME = 'athena-nonprod-vpc'
    KEYPAIR = 'athena-devops'
    DOMAIN = 'athena-nonprod.com'
    HOSTEDZONE_ID = 'Z0554033189HKTXE7UEFR'
    SSL_CERTIFICATE_ARN = 'arn:aws:acm:us-east-1:696952606624:certificate/6ce0fe36-9363-4eee-b3ab-253895739d4b'
    BE_DOMAIN = 'athena-nonprod.com'
    BE_HOSTEDZONE_ID = 'Z0554033189HKTXE7UEFR'
    BE_SSL_CERTIFICATE_ARN = 'arn:aws:acm:us-east-2:696952606624:certificate/99a317f8-79c9-476c-b2cd-7882c1640778'
    CQ_AMI_ID = 'ami-0b2be9376531ee6f6'
    // DEVOPS BUCKET 
    S3_DEVOPS = 'edulog-athena-devops'
    // ARTIFACTS BUCKET
    S3_ARTIFACTS = 'edulog-athena-artifacts'
    S3_ARTIFACTS_PREFIX = 'frontend/release'
    S3_ARTIFACTS_PREFIX_WQ = 'frontend/webquery/release'
    FE_CONFIG_FILE = 'systemconfig'
    // TEMPLATE DIRECTORY
    MASTER_TEMPLATE = "cloudformation/athena/templates/athena-eks.yml"
    OUTPUT_MASTER_TEMPLATE = "athena.${params.TENANT}.yaml"

    // ENVIRONMENT SIZES
    // SMALL
    SMALL_RDS = 'db.t3.medium'
    SMALL_RDS_STORAGE = '50'
    SMALL_RDS_MAX_STORAGE = '100'
    // MEDIUM
    MEDIUM_RDS = 'db.m5.large'
    MEDIUM_RDS_STORAGE = '50'
    MEDIUM_RDS_MAX_STORAGE = '100'
    // LARGE
    LARGE_RDS = 'db.m5.xlarge'
    LARGE_RDS_STORAGE = '100'
    LARGE_RDS_MAX_STORAGE = '200'

    SITES_LIST = "${JENKINS_HOME}/athena/sites/nonprod.sites.txt"
  }


  stages {
    stage('Read Jenkinsfile') {
      when {
        expression { return params.refresh == true }
      }
      steps {
        echo("Refreshed Jenkins Job")
      }
    }
    stage('Run Jenkins Job') {
      when {
          expression { return params.refresh == false }
      }
      stages{
        stage('Verify Authorization') {
          steps {
            script {
              // Get Build User
              wrap([$class: 'BuildUser']) {
                env.CREATOR = "${BUILD_USER_ID}"
              }
              if(CREATOR == 'anonymous') {
                error('You have to login to run this job!!!')
              }
            }
          }
        }
        stage('Checkout') {
          steps {
            echo "=> Checkout IaC Repository"
            script {
              def scmVars = checkout([
                $class: 'GitSCM', 
                branches: [[name: '*/eks-provision']],
                userRemoteConfigs: [[
                  url: 'git@github.com:eduloginc/devops-iac-athena.git', 
                  credentialsId: 'eduloginc-git-tankhuu'
                  ]]
              ])
              // Set dynamic s3 prefix
              env.S3_DEVOPS_PREFIX = "iac/cloudformation/athena/${ENV}/${TENANT}"
            }
          }
        }

        stage('Get Environment Size Variables') {
          steps {
            script {
              switch(ENV_SIZE) {
                case 'Small':
                  env.DB_INSTANCE_TYPE = SMALL_RDS
                  env.DB_ALLOCATED_STORAGE = SMALL_RDS_STORAGE
                  env.DB_MAXALLOCATED_STORAGE = SMALL_RDS_MAX_STORAGE
                  break
                case 'Medium':
                  env.DB_INSTANCE_TYPE = MEDIUM_RDS
                  env.DB_ALLOCATED_STORAGE = MEDIUM_RDS_STORAGE
                  env.DB_MAXALLOCATED_STORAGE = MEDIUM_RDS_MAX_STORAGE
                  break
                case 'Large':
                  env.DB_INSTANCE_TYPE = LARGE_RDS
                  env.DB_ALLOCATED_STORAGE = LARGE_RDS_STORAGE
                  env.DB_MAXALLOCATED_STORAGE = LARGE_RDS_MAX_STORAGE
                  break
                default:
                  env.DB_INSTANCE_TYPE = SMALL_RDS
                  env.DB_ALLOCATED_STORAGE = SMALL_RDS_STORAGE
                  env.DB_MAXALLOCATED_STORAGE = SMALL_RDS_MAX_STORAGE
                  break
              }
            }
          }
        }

        stage('Package Templates') {
          steps {
            echo "=> Package CFN Templates"
            sh """
              #!/bin/bash -xe
              /usr/local/bin/aws --region ${params.REGION} cloudformation package --template-file ${MASTER_TEMPLATE} \
              --s3-bucket ${S3_DEVOPS} --s3-prefix ${S3_DEVOPS_PREFIX} \
              --force-upload --output-template-file ${OUTPUT_MASTER_TEMPLATE}
            """
            echo "=> Upload master template to S3"
            sh """
              #!/bin/bash -xe
              /usr/local/bin/aws s3 cp ${OUTPUT_MASTER_TEMPLATE} s3://${S3_DEVOPS}/${S3_DEVOPS_PREFIX}/${OUTPUT_MASTER_TEMPLATE}
            """
          }
        }

        stage('Create CFN Stack') {
          steps {
            echo "=> Deploy CFN Template"
            sh """
              #!/bin/bash -xe
              /usr/local/bin/aws --region ${params.REGION} cloudformation deploy --template-file ${OUTPUT_MASTER_TEMPLATE} \
              --s3-bucket ${S3_DEVOPS} --s3-prefix ${S3_DEVOPS_PREFIX} \
              --stack-name ${STACK_NAME} \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
              --force-upload \
              --tags \
                environment=${ENV} \
                project=${PROJECT} \
                author=${AUTHOR} \
                tenant=${TENANT} \
                creator=${CREATOR} \
                infras=${INFRAS_VERSION} \
              --parameter-overrides \
                KeyPairName=${KEYPAIR} \
                Tenant=${params.TENANT} \
                TenantId=${TENANT_ID} \
                Env=${ENV} \
                VPCStackName=${VPC_STACK_NAME} \
                FEDomain=${DOMAIN}  \
                FEHostedZoneId=${HOSTEDZONE_ID} \
                FESSLCertificateId=${SSL_CERTIFICATE_ARN} \
                BEDomain=${BE_DOMAIN}  \
                BEHostedZoneId=${BE_HOSTEDZONE_ID} \
                BESSLCertificateId=${BE_SSL_CERTIFICATE_ARN} \
                DBInstanceClass=${DB_INSTANCE_TYPE}  \
                DBAllocatedStorage=${DB_ALLOCATED_STORAGE}  \
                DBMaxAllocatedStorage=${DB_MAXALLOCATED_STORAGE}  \
                DBMasterUserPassword=${params.DB_MASTER_PASSWORD} \
                DBSnapshotIdentifier=${params.DB_SNAPSHOT_ID}
            """
          }
        }

        stage('Backend 3rd deployment') {
          environment {
            site = "${params.TENANT}"
          }
          steps {
            dir('cloudformation/athena/scripts/backend/helm') {
              script {
                sh "pwd"
                sh "ls -la"
                sh "kubectl --context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod create ns $site|| true"
                sh "helm --kube-context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod -n $site install --wait -f 'cache.values.yaml' mongodb bitnami/mongodb"
                sh "helm --kube-context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod -n $site install --wait -f 'queue.values.yaml' rabbitmq bitnami/rabbitmq"
              }
            }
          }
        }
        stage('Backend services Config and Deploy') {
          environment {
            site = "${params.TENANT}"
            chartName = "athena"
            nosHost = "${params.NOS_HOST}"
            tags = "${params.BE_RELEASE_VERSION}"
            rds_endpoint =sh(script: "/usr/local/bin/get_output_from_stack ${STACK_NAME} RDSEndpoint",returnStdout: true).trim()
          }
          steps {
            dir('cloudformation/athena/scripts/backend/helm') {
              script {
                sh "update-configmap $site $TENANT_ID $rds_endpoint $nos_host $tags"
                sh "cat value.yaml"
                sh "helm --kube-context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod -n $site install -f 'value.yaml' $site stable-athena/$chartName"
              }
            }
          }
        }
        stage('Deploy Frontend') {
          environment {
            FE_DOMAIN = "${params.TENANT}.${DOMAIN}"
          }
          steps {
            echo "=> Download package ${params.FE_RELEASE_VERSION}"
            sh 'aws s3 cp s3://${S3_ARTIFACTS}/${S3_ARTIFACTS_PREFIX}/${FE_RELEASE_VERSION}.tar.gz .'
            sh 'tar zxvf ${FE_RELEASE_VERSION}.tar.gz'

            echo "==> Configure Environment"
            configurePackage("${TENANT}", "${FE_RELEASE_VERSION}", "${ENV}")

            echo "==> Deploy Athena Frontend for ${params.TENANT}"
            deployToTenant("${ENV}", "${FE_DOMAIN}")
          }
        }


        stage('Deploy WebQuery') {
          environment {
            WQ_DOMAIN = "webquery-${params.TENANT}.${DOMAIN}"
          }
          steps {
            echo "=> Download package ${params.FE_RELEASE_VERSION}"
            sh 'aws s3 cp s3://${S3_ARTIFACTS}/${S3_ARTIFACTS_PREFIX_WQ}/${WQ_RELEASE_VERSION}.tar.gz .'
            sh 'tar zxvf ${WQ_RELEASE_VERSION}.tar.gz'

            echo "==> Configure Environment"
            configureWQPackage("${TENANT}", "${WQ_RELEASE_VERSION}", "${ENV}")

            echo "==> Deploy Athena Frontend for ${params.TENANT}"
            deployWQToTenant("${ENV}", "${WQ_DOMAIN}")
          }
        }
        
        stage('Get tenant information') {
          steps {
            script {
              env.CREATION_TIME = sh(script:'date', returnStdout: true).trim()
              env.S3_TENANT = 's3://edulog-athena-devops/iac/tenants/nonprod/'
            }
            dir('cicd/scripts/bash') {
              sh 'sh env_output_eks_nonprod.sh $TENANT'
            }
          }
        }
        stage('Add site information to SSM Parameter Store and Sites List') {
          environment {
            site = "${params.TENANT}"
          }
          steps {
            echo "=> Add Site Information into SSM Parameter Store"
            dir('cloudformation/athena/scripts/cfn') {
              script {
                sh "ls -l"
                sh '''#!/bin/bash -xe
                  fe_url=$(/usr/local/bin/get_output_from_stack ${STACK_NAME} FrontendURL)
                  fe_cf_id=$(/usr/local/bin/get_output_from_stack ${STACK_NAME} FECloudFrontId)
                  wq_url=$(/usr/local/bin/get_output_from_stack ${STACK_NAME} WebQueryURL)
                  wq_cf_id=$(/usr/local/bin/get_output_from_stack ${STACK_NAME} WQCloudFrontId)
                  be_url_alb=$(kubectl --context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod get svc gateway -n $site -o json| jq '.status.loadBalancer.ingress|.[0].hostname'|cut -d '"' -f2)
                  be_url=$(kubectl --context arn:aws:eks:us-east-2:696952606624:cluster/athena-eks-nonprod get svc gateway -n $site -o json| jq '.metadata.annotations."dns.alpha.kubernetes.io/external"'|cut -d '"' -f2)
                  rds_endpoint=$(/usr/local/bin/get_output_from_stack ${STACK_NAME} RDSEndpoint)
                  sh add_environment_params.sh ${ENV} ${TENANT} ${STACK_NAME} ${fe_url} ${fe_cf_id} ${wq_url} ${wq_cf_id} ${be_url} ${rds_endpoint} ${DB_MASTER_PASSWORD}
                  echo "Update BE to route53"
                  /usr/local/bin/update_route53 Z0554033189HKTXE7UEFR ${be_url} ${be_url_alb}
                '''
              }
            }
            echo "=> Add Site into Sites List"
            sh "echo ${TENANT} >> ${SITES_LIST}"
          }
          // post {
          //   success {
          //     echo "Deploy success for ${ENV} - Tenant: ${params.TENANT}"
          //     notifyGChat("${TENANT}", "${ENV}", "$FE_RELEASE_VERSION", "$BE_RELEASE_VERSION", "$WQ_RELEASE_VERSION", "$INFRAS_VERSION", "$GCHAT_TOKEN_DEVOPS", "$CREATOR")
          //   }
          //   failure {
          //     echo "Deploy failed for ${ENV} - Tenant: ${params.TENANT}"
          //     notifyGChat("${TENANT}", "${ENV}", "$FE_RELEASE_VERSION", "$BE_RELEASE_VERSION", "$WQ_RELEASE_VERSION", "$INFRAS_VERSION", "$GCHAT_TOKEN_DEVOPS", "$CREATOR")
          //   }
          // }
        }

        stage('homer assistant') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              echo "Homer collect information"
              script {
                def createDate = sh(script: "echo `date`", returnStdout: true).trim()
                env.filePath = "/tmp/sites/site-${ENV}-${TENANT}.json"
                def document = [
                  "site": "$TENANT",
                  "cfnStackName": "$STACK_NAME",
                  "tenantId": "$TENANT_ID",
                  "size": "$ENV_SIZE",
                  "feReleaseVersion": "$FE_RELEASE_VERSION",
                  "wqReleaseVersion": "$WQ_RELEASE_VERSION",
                  "beReleaseVersion": "$BE_RELEASE_VERSION",
                  "infrasVersion": "$INFRAS_VERSION",
                  "dbSnapshotId": "$DB_SNAPSHOT_ID",
                  "feUrl": "https://${params.TENANT}.${DOMAIN}",
                  "wqUrl": "https://webquery-${params.TENANT}.${DOMAIN}",
                  "beUrl": "https://ath-be-${params.TENANT}.${DOMAIN}",
                  "rdsEndpoint": "athena-${TENANT}-rds.cr5mzwdlkiuv.us-east-2.rds.amazonaws.com",
                  "creator": "${CREATOR}",
                  "createDate": "${createDate}",
                  "status": "INUSED"
                ]
                writeJSON file: "$filePath", json: document
              }
              sh '''
                #!/bin/bash -xe
                cd ~/athena/devops-automation-helper/friday/esShipper/
                /usr/bin/python3 -m index --filePath=${filePath}
              '''
            }
          }
        }
      } 
    }
  }   

  post {
    always {
      echo '==> Clean up built after run'
      cleanWs()
    }
    success {
      echo "Deploy success for ${ENV} - Tenant: ${params.TENANT}"
    }
    failure {
      echo "Deploy failed for ${ENV} - Tenant: ${params.TENANT}"
    }
  }
}