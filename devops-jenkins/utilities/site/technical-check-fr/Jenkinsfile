node {
    sitesList_nonprod = sh (script: 'cat ${JENKINS_HOME}/athena/sites/nonprod.sites.txt', returnStdout: true).trim()
    sitesList_prod = sh (script: 'cat ${JENKINS_HOME}/athena/sites/prod-fr.sites.txt', returnStdout: true).trim()
}

pipeline{
    agent any

    parameters {
        booleanParam(name: 'refresh', defaultValue: false, description: 'Update list sites on Nonprod')
        choice(name: 'envType', choices: ['nonprod', 'prod'], description: "Choose environment")
        choice(name: 'siteName_nonprod', choices: "${sitesList_nonprod}", description: "Site need to be checked. Please make sure EnvType selected as Nonprod")
        choice(name: 'siteName_prod', choices: "${sitesList_prod}", description: "Site need to be checked. Please make sure EnvType selected as Prod")
    }

    environment {
        //envType = "${env_type}"
        currentDate = sh(returnStdout: true, script: 'date +%Y-%m-%d').trim()
        siteName=""
    }

    stages {
        stage('Read Jenkins file') {
            when {
                expression{ return params.refresh == true}
            }
            steps {
                echo("Refresed list of sites")
            }
        }
        stage('Run Jenkins job') {
            when {
                expression {return params.refresh == false}
            }
            stages {
                stage ('Verify Authorization') {
                    steps {
                        script {
                            // Get Build user
                            wrap([$class: 'BuildUser']) {
                                env.CREATOR = "${BUILD_USER_ID}"
                            }
                            if(CREATOR == 'anonymous') {
                                error('You have to login to run this job!!!')
                            }
                        }
                    }
                }
                stage ('Get AWS_CMD based on env_type') {
                    steps {
                        script {
                            env.AWS_CMD = 'aws'
                            if(envType == 'prod') {
                                env.AWS_CMD = 'aws --profile prod-fr'
                                siteName="${siteName_prod}"
                                echo "${envType}"
                            } else {
                                env.AWS_CMD = 'aws'
                                siteName="${siteName_nonprod}"
                            }

                            //Get BE_ASG_NAME from AWS Parameter Store.
                            env.BE_ASG_NAME = sh(script: "${AWS_CMD} ssm get-parameter --name /edulog/athena/${envType}/${siteName}/be_asg --output text --query 'Parameter.[Value]'",returnStdout: true).trim()
                        }
                    }
                }
                stage ('Technical check') {
                    environment {
                        //tenandId = sh(script: "${AWS_CMD} cloudformation describe-stacks --stack-name athena-${siteName} --output yaml --query "Stacks[0].Parameters[?ParameterKey=='TenantId'].ParameterValue" --output text", returnStdout: true).trim()
                        be_ip_addresses = ""
                        ssh_profile = "${JENKINS_HOME}/.ssh/devops.pem"
                        ssh_user = 'ubuntu'
                    }
                    steps {
                        script {
                            echo "${currentDate}"
                            if(envType == 'prod') {
                                be_ip_addresses = sh(script: '/usr/local/bin/getip_fromasg get_private_ip --profile ${envType} --region eu-west-3 --name=${BE_ASG_NAME}', returnStdout: true).trim()
                            } else {
                                be_ip_addresses = sh(script: '/usr/local/bin/getip_fromasg get_private_ip --name=${BE_ASG_NAME} --region eu-west-3', returnStdout: true).trim()
                            }
                            be_ip_addresses.tokenize(',[]').each { ip ->
                                ip = ip.trim()
                                sh "sh /usr/local/bin/technical_check/services_check_fr.sh ${envType} ${siteName} ${ip} ${ssh_profile} paris"
                            }
                            sh "cat /usr/local/bin/technical_check/results/${envType}/${siteName}.txt"
                        }
                    }
                }
            }
        }
    }
    post {
    always {
      echo "=> Clean Workspace after run"
      cleanWs()
    }
    success {
      echo "==> Build Success"
    }
    failure {
      echo "==> Build Failure"
    }
  }
}
